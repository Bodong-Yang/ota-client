name: E2E CI

on: [pull_request]

env:
  OTA_metadata_REPO: tier4/ota-metadata

jobs:
  ota_image_build:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout OTA client repo
        uses: actions/checkout@v2
      - name: Setup Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with: 
          install: true
      - name: Build and export the OTA baseimage
        working-directory: ./tests/
        run: |
          docker build -t base-image --build-arg KERNEL_VERSION=5.8.0-53-generic ./Dockerfile_OTA-baseimage
          docker create --name base-image base-image
          docker export base-image > /tmp/base-image.tgz
      # prepare the image for next job
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: base-image
          path: /tmp/base-image.tgz
  ota_update_test:
    runs-on: ubuntu-20.04
    needs: ota_image_build
    timeout-minutes: 10
    steps:
      - name: Checkout OTA client repo
        uses: actions/checkout@v2
        with:
          path: ./ota-client
      - name: Setup OTA-image sign tools
        uses: actions/checkout@v2
        with:
          name: ${{ env.OTA_metadata_REPO }}
          path: ./ota-metadata
      - name: Install package dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r ./ota-client/app/requirements.txt
          python -m pip install -r ./ota-metadata/metadata/ota_metadata/requirements.txt
      - name: Install test dependencies
        run: |
          python -m pip install -r ./ota-client/tests/requirements.txt
      - name: Get OTA image from the previous job
        uses: actions/download-artifact@v2
        with:
          name: base-image
          path: /tmp
          if-no-files-found: error # if previous build failed
      - name: Extract OTA image
        run: |
          mkdir -p ./data
          sudo tar xf /tmp/base-image.tgz -C ./data
      - name: Generate metadata
        run: | 
          sudo $pythonLocation/bin/python \
            ota-metadata/metadata/ota_metadata/metadata_gen.py \
              --target-dir data --ignore-file ota-metadata/metadata/ignore.txt
      - name: Self-sign metadata
        run: |
          sudo ota-metadata/metadata/key-gen.sh
          sudo $pythonLocation/bin/python \
            ota-metadata/metadata/ota_metadata/metadata_sign.py \
              --sign-key privatekey.pem \
              --cert-file certificate.pem \
              --directory-file dirs.txt \
              --symlink-file symlinks.txt \
              --regular-file regulars.txt \
              --rootfs-directory data \
              --persistent-file ota-client/tests/persistents-x1.txt
          sudo cp ota-client/tests/persistents-x1.txt .
      # - name: Start local OTA server in the background
      #   run: |
      #     nohup sudo $pythonLocation/bin/python -m http.server 8080 > /dev/null 2>&1 &
      - name: Testing OTA update
        run: |
          set -o pipefail
          sudo $pythonLocation/bin/python -m pytest \
            --cov-report term-missing --cov=app ./e2e_tests \
            | tee pytest-coverage.txt
      # export the coverage report to the comment!
      - name: Add coverage report to PR comment
        continue-on-error: true
        uses: coroo/pytest-coverage-commentator@v1.0.2